#Table 1.Bivariate linear regression results for Income-derived Gini and NTL Gini by year

# Load the data (make sure the file path is correct)
municipalities <- st_read("Dataset_Gini_Pob_2015_2020.shp")

# Verify that the necessary columns are present
print(colnames(municipalities))

# Define a function to extract model information
extract_model_info <- function(model) {
  summary_model <- summary(model)
  r_squared <- summary_model$r.squared
  coefs <- summary_model$coefficients
  
  # Check if coefficients are available
  if (is.null(coefs) || nrow(coefs) == 0) {
    return(list(r_squared = NA, coefs = NA))
  }
  
  # Convert coefficients to a data frame
  coefs_df <- as.data.frame(coefs)
  
  # Add significance stars based on p-values
  coefs_df$stars <- ifelse(coefs_df$`Pr(>|t|)` < 0.001, "***",
                           ifelse(coefs_df$`Pr(>|t|)` < 0.01, "**",
                                  ifelse(coefs_df$`Pr(>|t|)` < 0.05, "*", "")))
  
  return(list(r_squared = r_squared, coefs = coefs_df))
}

# Define the years for which we want to fit the models
years <- 2015:2020

# Empty list to store results for all models
results_list <- list()

# Run models for each year and extract the results
for (year in years) {
  # Define the formulas dynamically for each year
  formula_viirs <- as.formula(paste("Gn_", year, "~ V2_", year, sep = ""))
  formula_harmo <- as.formula(paste("Gn_", year, "~ H2_", year, sep = ""))
  
  # Fit the models for each year
  model_viirs <- lm(formula_viirs, data = municipalities)
  model_harmo <- lm(formula_harmo, data = municipalities)
  
  # Extract the results
  viirs_info <- extract_model_info(model_viirs)
  harmo_info <- extract_model_info(model_harmo)
  
  # Create a data frame for the current year with intercept and coefficient estimates
  year_results <- data.frame(
    Year = year,
    R_squared_Viirs = viirs_info$r_squared,
    R_squared_Harmo = harmo_info$r_squared,
    
    # Include intercept and coefficient estimates
    Viirs_Intercept = paste0(round(viirs_info$coefs$Estimate[1], 3), viirs_info$coefs$stars[1]),
    Viirs_V2_Estimate = paste0(round(viirs_info$coefs$Estimate[2], 3), viirs_info$coefs$stars[2]),
    
    Harmo_Intercept = paste0(round(harmo_info$coefs$Estimate[1], 3), harmo_info$coefs$stars[1]),
    Harmo_H2_Estimate = paste0(round(harmo_info$coefs$Estimate[2], 3), harmo_info$coefs$stars[2])
  )
  
  results_list[[as.character(year)]] <- year_results
}

# Combine all the results into a single data frame
final_results <- bind_rows(results_list)

# Print the final results
print(final_results)

# Write the final results to a CSV file
write.csv(final_results, "final_results_cross_sectiona_per_year.csv", row.names = FALSE)

####################################
###Table 2
### Cross-sectional regression accounting for population size and averages from 2015 to 2020

# Load the shapefile (replace with your actual path)
municipalities <- st_read("Dataset_Gini_Pob_2015_2020.shp")

# Identify the columns that begin with specific prefixes (e.g., "Pob_", "Gn_", "V2_", "H2_")
pob_columns <- grep("^Pob_", names(municipalities), value = TRUE)
gn_columns <- grep("^Gn_", names(municipalities), value = TRUE)
v2_columns <- grep("^V2_", names(municipalities), value = TRUE)
h2_columns <- grep("^H2_", names(municipalities), value = TRUE)

# Calculate the average for each of the relevant columns across rows
municipalities <- municipalities %>%
  rowwise() %>%
  mutate(
    Pob_Avg = mean(c_across(all_of(pob_columns)), na.rm = TRUE),
    Gn_Avg = mean(c_across(all_of(gn_columns)), na.rm = TRUE),
    V2_Avg = mean(c_across(all_of(v2_columns)), na.rm = TRUE),
    H2_Avg = mean(c_across(all_of(h2_columns)), na.rm = TRUE)
  ) %>%
  ungroup()

# Categorize the population in 2020 into defined ranges
municipalities <- municipalities %>%
  mutate(Pob_Category = case_when(
    Pob_2020 <= 2000 ~ "<= 2",
    Pob_2020 > 2000 & Pob_2020 <= 10000 ~ "2 - 10",
    Pob_2020 > 10000 & Pob_2020 <= 50000 ~ "10 - 50",
    Pob_2020 > 50000 & Pob_2020 <= 100000 ~ "50 - 100",
    Pob_2020 > 100000 & Pob_2020 <= 250000 ~ "100 - 250",
    Pob_2020 > 250000 ~ "> 250",
    TRUE ~ "Other"  # To handle any outlier values
  ))

# Define a function to run a linear regression and extract the R² and coefficient estimates
get_model_results <- function(data) {
  # Remove rows with NA values for the relevant columns
  data_clean <- data %>% filter(!is.na(Gn_2020) & !is.na(V2_Avg))
  
  # Check if there are enough data points to run the model
  if(nrow(data_clean) > 1) {
    model <- lm(Gn_Avg ~ V2_Avg, data = data_clean)  # Fit the linear model
    results <- tidy(model) %>%
      bind_cols(tibble(R2 = summary(model)$r.squared))  # Add the R² value
    return(results)
  } else {
    # Return empty results if not enough data points to run the model
    return(tibble(term = NA, estimate = NA, std.error = NA, statistic = NA, p.value = NA, R2 = NA))
  }
}

# Apply the function to each population category and gather results
model_results <- municipalities %>%
  group_by(Pob_Category) %>%
  group_modify(~ get_model_results(.)) %>%
  ungroup()

# Print the model results for each population category
print(model_results)

# Save the results to a CSV file
write.csv(model_results, "Model_Results.csv", row.names = FALSE)

###################################################################
####PLOTTING RESULTS IN FORMATTED TABLES############
# Load necessary libraries
library(dplyr)
library(formattable)

#### Create the data frame for the formatted model results
#FORMATED HARMONIZED NTL PLOTTING
model_results <- tibble(
  `Pop category` = c("<= 2", "2 - 10", "10 - 50", "50 - 100", "100 - 250", "> 250"),
  Intercept = c(29.3, 28.6, 30.2, 33.5, 28.2, 34.6),
  `Viirs estimate` = c("0.0583", "1.41***", "1.22*", "-0.417", "6.59**", "-0.313"),
  `R²` = c(0.0000114, 0.00751, 0.00451, 0.000367, 0.123, 0.000371)
)

# Create the formatted table for the model results
formattable(model_results, 
            list(
              `Pop category` = formatter("span", style = ~ style(font.weight = "normal")),  # Normal font weight for 'Pop category'
              
              # Format 'Viirs estimate' column to highlight * or . in red
              `Viirs estimate` = formatter("span", 
                                           style = ~ style(
                                             color = ifelse(grepl("\\*", `Viirs estimate`), "red", "black"), 
                                             font.weight = ifelse(grepl("\\*", `Viirs estimate`), "bold", "normal")
                                           )),
              
              # Format R² column to display values with 5 decimal places
              `R²` = formatter("span", 
                               style = ~ style(
                                 color = ifelse(`R²` == 0.123 | `R²` == 0.000371, "red", "black"), 
                                 font.weight = ifelse(`R²` == 0.123 | `R²` == 0.000371, "bold", "normal")
                               ),
                               x ~ formatC(x, format = "f", digits = 5))  # Format R² values with 5 decimal places
            )
)

#FORMATED HARMONIZED NTL PLOTTING

# Create the data frame for harmonized estimates, removing the "Other" category
model_results <- tibble(
  `Pop category` = c("<= 2", "2 - 10", "10 - 50", "50 - 100", "100 - 250", "> 250"),
  Intercept = c(29.3, 28.6, 30.2, 33.5, 28.2, 34.6),
  `Harmonized estimate` = c("0.322", "-0.467", "-2.51***", "1.31", "4.82*", "7.39."),
  R2 = c(0.000139, 0.000576, 0.0200, 0.00284, 0.0818, 0.212)
)

# Format R² to 5 decimal places
model_results$R2 <- formatC(model_results$R2, format = "f", digits = 5)

# Create the formatted table for harmonized estimates
formattable(model_results, 
            list(
              `Pop category` = formatter("span", style = ~ style(font.weight = "normal")),  # Normal font weight for 'Pop category'
              
              # Format 'Harmonized estimate' column to highlight * or . in red
              `Harmonized estimate` = formatter("span", 
                                                style = ~ style(
                                                  color = ifelse(grepl("\\*", `Harmonized estimate`) | `Harmonized estimate` == "7.39.", "red", "black"), 
                                                  font.weight = ifelse(grepl("\\*", `Harmonized estimate`) | `Harmonized estimate` == "7.39.", "bold", "normal")
                                                )),
              
              # Format R² column to highlight specific R² values in red
              R2 = formatter("span", 
                             style = ~ style(
                               color = ifelse(R2 == "0.08180" | R2 == "0.21200", "red", "black"), 
                               font.weight = ifelse(R2 == "0.08180" | R2 == "0.21200", "bold", "normal")
                             ))
            )
)
